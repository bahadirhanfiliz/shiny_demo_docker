plot(cars)
plot(cars)
print('WHAT')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# Libraries --------------------------------------------------------------
library(igraph)
install.packages("igraph")
# Libraries --------------------------------------------------------------
library(igraph)
library(geomnet)
install.packages("geomnet")
# Libraries --------------------------------------------------------------
library(igraph)
library(geomnet)
# Data Preparation -------------------------------------------------------
#Load dataset
data(lesmis)
#Edges
edges <- as.data.frame(lesmis[1])
colnames(edges) <- c("from", "to", "weight")
#Create graph for the algorithms
g <- graph_from_data_frame(edges, directed = FALSE)
install.packages("ggplot2")
# Libraries --------------------------------------------------------------
library(igraph)
library(geomnet)
# Data Preparation -------------------------------------------------------
#Load dataset
data(lesmis)
#Edges
edges <- as.data.frame(lesmis[1])
colnames(edges) <- c("from", "to", "weight")
#Create graph for the algorithms
g <- graph_from_data_frame(edges, directed = FALSE)
install.packages("visNetwork")
# Libraries --------------------------------------------------------------
library(visNetwork)
library(igraph)
install.packages("igraph")
library("igraph", lib.loc="~/R/win-library/4.0")
# Libraries --------------------------------------------------------------
library(visNetwork)
library(igraph)
library(geomnet) #where dataset is pulled
install.packages("geomnet")
# Libraries --------------------------------------------------------------
library(visNetwork)
library(igraph)
library(geomnet) #where dataset is pulled
# Data Preparation -------------------------------------------------------
#Load dataset
data(lesmis)
#Nodes
nodes <- as.data.frame(lesmis[2])
colnames(nodes) <- c("id", "label")
nodes$id <- nodes$label
#Edges
edges <- as.data.frame(lesmis[1])
colnames(edges) <- c("from", "to", "weight")
#Create graph for the algorithms
g <- graph_from_data_frame(edges, directed = FALSE)
View(g)
View(edges)
View(nodes)
# Community Detection ----------------------------------------------------
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = FALSE)
#Louvain Comunity Detection
cluster <- cluster_louvain(graph)
cluster_df <- data.frame(as.list(membership(cluster)))
cluster_df <- as.data.frame(t(cluster_df))
cluster_df$label <- rownames(cluster_df)
#Create group column
nodes <- left_join(nodes, cluster_df, by = "label")
# Community Detection ----------------------------------------------------
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = FALSE)
#Louvain Comunity Detection
cluster <- cluster_louvain(graph)
cluster_df <- data.frame(as.list(membership(cluster)))
cluster_df <- as.data.frame(t(cluster_df))
cluster_df$label <- rownames(cluster_df)
#Create group column
nodes <- merge(x = nodes, y = cluster_df, by = "label", all.x = TRUE)
colnames(nodes)[3] <- "group"
visNetwork(nodes, edges)
visNetwork(nodes, edges)
install.packages("evaluate")
visNetwork(nodes, edges)
# Community Detection ----------------------------------------------------
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = FALSE)
#Louvain Comunity Detection
cluster <- cluster_louvain(graph)
cluster_df <- data.frame(as.list(membership(cluster)))
cluster_df <- as.data.frame(t(cluster_df))
cluster_df$label <- rownames(cluster_df)
#Create group column
nodes <- merge(x = nodes, y = cluster_df, by = "label", all.x = TRUE)
colnames(nodes)[3] <- "group"
visNetwork(nodes, edges)
# Community Detection ----------------------------------------------------
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = FALSE)
#Louvain Comunity Detection
cluster <- cluster_louvain(graph)
cluster_df <- data.frame(as.list(membership(cluster)))
cluster_df <- as.data.frame(t(cluster_df))
cluster_df$label <- rownames(cluster_df)
#Create group column
nodes <- merge(x = nodes, y = cluster_df, by = "label", all.x = TRUE)
colnames(nodes)[3] <- "group"
visNetwork(nodes, edges)
# Libraries --------------------------------------------------------------
library(visNetwork)
library(igraph)
library(geomnet) #where dataset is pulled
# Data Preparation -------------------------------------------------------
#Load dataset
data(lesmis)
#Nodes
nodes <- as.data.frame(lesmis[2])
colnames(nodes) <- c("id", "label")
nodes$id <- nodes$label
#Edges
edges <- as.data.frame(lesmis[1])
colnames(edges) <- c("from", "to", "weight")
#Create graph for the algorithms
g <- graph_from_data_frame(edges, directed = FALSE)
# Community Detection ----------------------------------------------------
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = FALSE)
#Louvain Comunity Detection
cluster <- cluster_louvain(graph)
cluster_df <- data.frame(as.list(membership(cluster)))
cluster_df <- as.data.frame(t(cluster_df))
cluster_df$label <- rownames(cluster_df)
#Create group column
nodes <- merge(x = nodes, y = cluster_df, by = "label", all.x = TRUE)
colnames(nodes)[3] <- "group"
View(cluster_df)
View(nodes)
View(edges)
setwd("C:/Users/user/Desktop/Shiny/shiny_demo_docker")
renv::init()
